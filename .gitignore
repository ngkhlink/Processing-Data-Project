  def warn(*args, **kwargs):
pass
import warnings
warnings.warn = warn

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler,PolynomialFeatures
from sklearn.linear_model import LinearRegression
%matplotlib inline

import piplite
    await piplite.install('seaborn')
filepath='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'
df = pd.read_csv(filepath, header=0)
df.head()

df.dtypes
df.describe()

df.drop(["Unnamed: 0", "id"], axis=1, inplace=True)

print("number of NaN values for the column bedrooms :", df['bedrooms'].isnull().sum())
print("number of NaN values for the column bathrooms :", df['bathrooms'].isnull().sum())

mean=df['bedrooms'].mean()
df['bedrooms'].replace(np.nan,mean, inplace=True)
mean=df['bathrooms'].mean()
df['bathrooms'].replace(np.nan,mean, inplace=True)

df['floors'].value_counts().to_frame()

import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
sns.boxplot(x='waterfront', y='price', data=df)

sns.regplot(x="sqft_above", y="price", data=df)
plt.ylim(0,)

X = df[['long']]
Y = df['price']
lm = LinearRegression()
lm.fit(X,Y)
lm.score(X, Y)

from sklearn.linear_model import LinearRegression

lm = LinearRegression()
lm

X = df[['sqft_living']]
Y = df['price']

lm.fit(X,Y)

Yhat=lm.predict(X)
Yhat[0:5]

lm.intercept_
lm.coef_

lm1.coef_
lm1.intercept_
sqft_living
lm.fit(X, Y)

print('The R-square is: ', lm.score(X, Y))

features =["floors", "waterfront","lat" ,"bedrooms" ,"sqft_basement" ,"view" ,"bathrooms","sqft_living15","sqft_above","grade","sqft_living"]

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
lr = LinearRegression()

X = df[['floors', 'waterfront', 'lat', 'bedrooms', 'sqft_basement', 'view', 'bathrooms', 'sqft_living15', 'sqft_above', 'grade', 'sqft_living']]
Y = df['price']
lr.fit(X,Y)
r2_score = lr.score(X,Y)

lm.fit(X, Y)

print('The R-square is: ', lm.score(X, Y))
The R-square is: 0.6576861682430691

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
print("done")

features =["floors", "waterfront","lat" ,"bedrooms" ,"sqft_basement" ,"view" ,"bathrooms","sqft_living15","sqft_above","grade","sqft_living"]
X = df[features]
Y = df['price']
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)

print("number of test samples:", x_test.shape[0])
print("number of training samples:",x_train.shape[0])

from sklearn.linear_model import Ridge
RM = Ridge(alpha=0.1)
RM.fit(x_train,y_train)
RM.score(x_test,y_test)

pr = PolynomialFeatures(degree=2)
x_train_pr = pr.fit_transform(x_train)
x_test_pr = pr.fit_transform(x_test)

RM = Ridge(alpha=0.1)

RM.fit(x_train_pr, y_train)
RM.score(x_test_pr, y_test)
